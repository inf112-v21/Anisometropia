<Project>
  <Name>RoboRally</Name>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Untitled</Name>
    <Language>Java</Language>
    <Entities>
      <Entity type="Class">
        <Name>Main</Name>
        <Access>Public</Access>
        <Location left="226" top="25" />
        <Size width="162" height="94" />
        <Collapsed>False</Collapsed>
        <Member type="Method">public static void main(String[] args)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>GameScreen</Name>
        <Access>Public</Access>
        <Location left="472" top="65" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Method">public void create()</Member>
        <Member type="Method">public void render()</Member>
        <Member type="Method">public void dispose()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>GameLogic</Name>
        <Access>Public</Access>
        <Location left="816" top="656" />
        <Size width="162" height="298" />
        <Collapsed>False</Collapsed>
        <Member type="Constructor">public GameLogic(GameMap gameMap)</Member>
        <Member type="Method">public void addPlayer(int spawnX, int spawnY, String name)</Member>
        <Member type="Method">public void update()</Member>
        <Member type="Method">public void dealRegisterCards()</Member>
        <Member type="Method">public void executeCard()</Member>
        <Member type="Method">public void endOfTurnCheck()</Member>
        <Member type="Method">public void endOfRoundCheck()</Member>
        <Member type="Method">public void checkIfOnlyOnePlayerLeft()</Member>
        <Member type="Method">public void gameReset()</Member>
        <Member type="Method">public boolean checkWin(Player player)</Member>
        <Member type="Method">public boolean checkLoss(int x, int y)</Member>
        <Member type="Method">public Player getCurrentPlayer()</Member>
        <Member type="Method">public Player getLastPlayer()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>ControlScreen</Name>
        <Access>Public</Access>
        <Location left="683" top="65" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Method">public void create()</Member>
        <Member type="Method">public void render()</Member>
        <Member type="Method">public void dispose()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>GraphicalGameMap</Name>
        <Access>Public</Access>
        <Location left="226" top="371" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Constructor">public GraphicalGameMap()</Member>
        <Member type="Method">public void setCell(int x, int y, String layer, TiledMapTileLayer.Cell cell)</Member>
        <Member type="Method">public boolean isThereFlagHere(int x, int y)</Member>
        <Member type="Method">public boolean isThereHoleOnThisPosition(int x, int y)</Member>
        <Member type="Method">public boolean isThereConveyorOnThisPosition(int x, int y)</Member>
        <Member type="Method">public int getAssetLayerID(int x, int y)</Member>
        <Member type="Method">public void setPlayerPosition(int x, int y, Player player)</Member>
        <Member type="Method">public void setToNull(int x, int y)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>TextualGameMap</Name>
        <Access>Public</Access>
        <Location left="30" top="371" />
        <Size width="162" height="247" />
        <Collapsed>False</Collapsed>
        <Member type="Constructor">public TextualGameMap(int width, int height)</Member>
        <Member type="Method">public void createGrid()</Member>
        <Member type="Method">public void setPlayerPosition(int x, int y, Player player)</Member>
        <Member type="Method">public void setValue(int y, int x, int value)</Member>
        <Member type="Method">public int getValue(int y, int x)</Member>
        <Member type="Method">public boolean isThereFlagHere(int x, int y)</Member>
        <Member type="Method">public int getAssetLayerID(int x, int y)</Member>
        <Member type="Method">public boolean isThereHoleOnThisPosition(int x, int y)</Member>
        <Member type="Method">public void setToNull(int x, int y)</Member>
        <Member type="Method">public boolean isThereConveyorOnThisPosition(int x, int y)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>PlayerQueue</Name>
        <Access>Public</Access>
        <Location left="446" top="656" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Constructor">public PlayerQueue()</Member>
        <Member type="Method">public ArrayList&lt;Player&gt; getPlayerQueue()</Member>
        <Member type="Method">public void next()</Member>
        <Member type="Method">public void add(Player player)</Member>
        <Member type="Method">public Player getCurrentPlayer()</Member>
        <Member type="Method">public Player getLastPlayer()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Player</Name>
        <Access>Public</Access>
        <Location left="242" top="656" />
        <Size width="162" height="366" />
        <Collapsed>False</Collapsed>
        <Member type="Constructor">public Player(int x, int y, String playerName, GameMap gameMap)</Member>
        <Member type="Method">public void move(int dx, int dy)</Member>
        <Member type="Method">public int getDirection()</Member>
        <Member type="Method">public void rotate(int amountToRotate)</Member>
        <Member type="Method">public void moveForward(int amountToMove)</Member>
        <Member type="Method">public void moveByDirection(int desiredDirection)</Member>
        <Member type="Method">public void setLifeTokens(int tokens)</Member>
        <Member type="Method">public int getLifeTokens()</Member>
        <Member type="Method">public boolean checkIfPlayerCanRespawn()</Member>
        <Member type="Method">public void respawn()</Member>
        <Member type="Method">public void setDealtRegisterCards(ArrayList&lt;RegisterCard&gt; dealtCards)</Member>
        <Member type="Method">public void setChosenRegisterCards(ArrayList&lt;RegisterCard&gt; chosenCards)</Member>
        <Member type="Method">public ArrayList&lt;RegisterCard&gt; getDealtRegisterCards()</Member>
        <Member type="Method">public ArrayList&lt;RegisterCard&gt; getChosenRegisterCards()</Member>
        <Member type="Method">public void playerAlive()</Member>
        <Member type="Method">public boolean isPlayerDead()</Member>
        <Member type="Method">public void playerWins()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Interface">
        <Name>IPlayer</Name>
        <Access>Public</Access>
        <Location left="30" top="656" />
        <Size width="162" height="349" />
        <Collapsed>False</Collapsed>
        <Member type="Method">int getX()</Member>
        <Member type="Method">int getY()</Member>
        <Member type="Method">void move(int dx, int dy)</Member>
        <Member type="Method">boolean canMove(int dx, int dy)</Member>
        <Member type="Method">void rotate(int amountToRotate)</Member>
        <Member type="Method">void moveForward(int amountToMove)</Member>
        <Member type="Method">void setLifeTokens(int tokens)</Member>
        <Member type="Method">void updateLifeTokens()</Member>
        <Member type="Method">boolean checkIfPlayerCanRespawn()</Member>
        <Member type="Method">void respawn()</Member>
        <Member type="Method">void checkIfPlayerTooDamaged()</Member>
        <Member type="Method">void playerAlive()</Member>
        <Member type="Method">void playerDies()</Member>
        <Member type="Method">boolean isPlayerDead()</Member>
        <Member type="Method">void playerWins()</Member>
        <Member type="Method">boolean hasWon()</Member>
      </Entity>
      <Entity type="Class">
        <Name>GameMap</Name>
        <Access>Public</Access>
        <Location left="30" top="65" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Method">public abstract boolean isThereFlagHere(int x, int y)</Member>
        <Member type="Method">public abstract int getAssetLayerID(int x, int y)</Member>
        <Member type="Method">public abstract boolean isThereHoleOnThisPosition(int x, int y)</Member>
        <Member type="Method">public abstract void setPlayerPosition(int x, int y, Player player)</Member>
        <Member type="Method">public abstract int getWidth()</Member>
        <Member type="Method">public abstract int getHeight()</Member>
        <Member type="Method">public abstract void setToNull(int x, int y)</Member>
        <Member type="Method">public abstract boolean isThereConveyorOnThisPosition(int x, int y)</Member>
        <Modifier>Abstract</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Multiplayer</Name>
        <Access>Public</Access>
        <Location left="1378" top="191" />
        <Size width="162" height="216" />
        <Collapsed>True</Collapsed>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>DeckOfRegisterCards</Name>
        <Access>Public</Access>
        <Location left="991" top="65" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Constructor">public DeckOfRegisterCards()</Member>
        <Member type="Method">private void generateDeck()</Member>
        <Member type="Method">private void addCardsToDeck(String graphicLocation, int amountToMoveOrRotate, boolean movementCard, int numOfCards)</Member>
        <Member type="Method">public ArrayList&lt;RegisterCard&gt; dealNineCards()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>RegisterCard</Name>
        <Access>Public</Access>
        <Location left="991" top="371" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Constructor">public RegisterCard(String graphicLocation, int amountToMoveOrRotate, boolean isMovementCard)</Member>
        <Member type="Method">public void executeRegister(Player player)</Member>
        <Member type="Method">public String getGraphicLocation()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>ConveyorBelts</Name>
        <Access>Public</Access>
        <Location left="1246" top="656" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Method">public void runConveyorBelt(Player player, GameMap gameMap)</Member>
        <Member type="Method">private void conveyorBelt(int tileID, Player player)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Laser</Name>
        <Access>Public</Access>
        <Location left="1442" top="656" />
        <Size width="162" height="216" />
        <Collapsed>True</Collapsed>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>GameButton</Name>
        <Access>Public</Access>
        <Location left="683" top="371" />
        <Size width="162" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Constructor">public GameButton(int x, int y, int width, int height, boolean isActive, Texture texture)</Member>
        <Member type="Method">public boolean isActive()</Member>
        <Member type="Method">public void setActive(boolean active)</Member>
        <Member type="Method">public Texture getTexture()</Member>
        <Member type="Method">public void setTexture(Texture texture)</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Dependency" first="1" second="0">
        <Label>
        </Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>447</X>
          <Y>189</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>313</X>
          <Y>154</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Dependency" first="2" second="1">
        <Label>
        </Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>893</X>
          <Y>622</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>520</X>
          <Y>622</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Dependency" first="3" second="1">
        <Label>
        </Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>658</X>
          <Y>153</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Dependency" first="4" second="1">
        <Label>
        </Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>312</X>
          <Y>341</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>447</X>
          <Y>243</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Dependency" first="2" second="6">
        <Label>
        </Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>791</X>
          <Y>769</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>645</X>
          <Y>769</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Dependency" first="6" second="7">
        <Label>
        </Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>419</X>
          <Y>772</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>433</X>
          <Y>772</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Realization" first="7" second="8">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>217</X>
          <Y>771</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>217</X>
          <Y>771</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Generalization" first="4" second="9">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>251</X>
          <Y>346</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>112</X>
          <Y>306</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Generalization" first="5" second="9">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>56</X>
          <Y>346</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>56</X>
          <Y>310</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Dependency" first="4" second="7">
        <Label>
        </Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Dependency" first="2" second="11">
        <Label>
        </Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>941</X>
          <Y>631</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>966</X>
          <Y>222</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Dependency" first="2" second="12">
        <Label>
        </Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>1003</X>
          <Y>772</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>1071</X>
          <Y>617</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Dependency" first="11" second="12">
        <Label>
        </Label>
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>1087</X>
          <Y>306</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Dependency" first="2" second="13">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="False">
          <X>1216</X>
          <Y>815</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Dependency" first="3" second="15">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
    </Relationships>
  </ProjectItem>
</Project>